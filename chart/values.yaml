# -- AtomiCloud Service Tree. See [ServiceTree](https://atomicloud.larksuite.com/wiki/OkfJwTXGFiMJkrk6W3RuwRrZs64?theme=DARK&contentTheme=DARK#MHw5d76uDo2tBLx86cduFQMRsBb)
serviceTree:
  platform: &platform sulfoxide
  service: &service argon
  layer: &layer "1"

# -- Kubernetes labels and annotations, following Service Tree
tags: &tags
  atomi.cloud/platform: *platform
  atomi.cloud/service: *service
  atomi.cloud/layer: *layer

# -- Kyverno Configuration. See [Kyverno](https://github.com/kyverno/kyverno/tree/main/charts/kyverno)
kyverno:
  backgroundController:
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "topology.kubernetes.io/zone"
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            <<: *tags
            atomi.cloud/module: background-controller
    replicas: 1
    serviceMonitor:
      enabled: true
      interval: 60s
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 25m
        memory: 64Mi
    podAnnotations:
      <<: *tags
      atomi.cloud/module: background-controller
      drop_log: "true"
    podLabels:
      <<: *tags
      atomi.cloud/module: background-controller
  cleanupController:
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "topology.kubernetes.io/zone"
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            <<: *tags
            atomi.cloud/module: cleanup-controller
    replicas: 1
    serviceMonitor:
      enabled: true
      interval: 60s
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 25m
        memory: 64Mi
    podAnnotations:
      <<: *tags
      atomi.cloud/module: cleanup-controller
      drop_log: "true"
    podLabels:
      <<: *tags
      atomi.cloud/module: cleanup-controller
  admissionController:
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "topology.kubernetes.io/zone"
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            <<: *tags
            atomi.cloud/module: admission-controller
    createSelfSignedCert: true
    replicas: 1
    podLabels:
      <<: *tags
      atomi.cloud/module: admission-controller
    podAnnotations:
      <<: *tags
      atomi.cloud/module: admission-controller
      drop_log: "true"
    serviceMonitor:
      enabled: true
      interval: 60s
  container:
    resources:
      limits:
        memory: 512Mi
        cpu: 250m
      requests:
        cpu: 100m
        memory: 128Mi
  reportsController:
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "topology.kubernetes.io/zone"
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            <<: *tags
            atomi.cloud/module: reports-controller
    replicas: 1
    podLabels:
      <<: *tags
      atomi.cloud/module: reports-controller
    podAnnotations:
      <<: *tags
      atomi.cloud/module: reports-controller
      drop_log: "true"
    serviceMonitor:
      enabled: true
      interval: 60s
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 128Mi
  config:
    webhooks:
      - namespaceSelector:
          matchExpressions:
            - key: kubernetes.io/metadata.name
              operator: NotIn
              values:
                - kube-system
                - kube-node-lease
                - kube-public
                - kyverno
# -- Kyverno Policy Reporter Configuration. See [Policy Reporter](https://github.com/kyverno/policy-reporter)
policy-reporter:
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: "topology.kubernetes.io/zone"
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          <<: *tags
          atomi.cloud/module: reporter
  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 128Mi
  podLabels:
    <<: *tags
    atomi.cloud/module: reporter
  podAnnotations:
    <<: *tags
    atomi.cloud/module: reporter
    drop_log: "true"
  ui:
    enabled: true
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 128Mi
    podLabels:
      <<: *tags
      atomi.cloud/module: ui
    podAnnotations:
      <<: *tags
      atomi.cloud/module: ui
      drop_log: "true"
